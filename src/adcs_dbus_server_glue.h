
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__adcs_dbus_server_glue_h__adaptor__H__
#define __sdbuscpp__adcs_dbus_server_glue_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace OreSat {

class ADCS_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "org.OreSat.ADCS";

protected:
    ADCS_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerSignal("ReactionWheelsCommand").onInterface(INTERFACE_NAME).withParameters<sdbus::Struct<int32_t>>("command");
        object_.registerSignal("MagnetorquerCommand").onInterface(INTERFACE_NAME).withParameters<sdbus::Struct<int32_t>>("command");
        object_.registerProperty("CurrentState").onInterface(INTERFACE_NAME).withGetter([this](){ return this->CurrentState(); }).withSetter([this](const int32_t& value){ this->CurrentState(value); });
        object_.registerProperty("GPS_Data").onInterface(INTERFACE_NAME).withGetter([this](){ return this->GPS_Data(); }).withSetter([this](const sdbus::Struct<sdbus::Struct<double, double, double>, sdbus::Struct<double, double, double>, int32_t>& value){ this->GPS_Data(value); });
        object_.registerProperty("StarTrackerData").onInterface(INTERFACE_NAME).withGetter([this](){ return this->StarTrackerData(); }).withSetter([this](const sdbus::Struct<double, double, double, int32_t>& value){ this->StarTrackerData(value); });
        object_.registerProperty("MagnetometersData").onInterface(INTERFACE_NAME).withGetter([this](){ return this->MagnetometersData(); }).withSetter([this](const std::vector<sdbus::Struct<int32_t, int32_t>>& value){ this->MagnetometersData(value); });
        object_.registerProperty("ReactionWheelsData").onInterface(INTERFACE_NAME).withGetter([this](){ return this->ReactionWheelsData(); }).withSetter([this](const std::vector<sdbus::Struct<int32_t, int32_t>>& value){ this->ReactionWheelsData(value); });
        object_.registerProperty("MagnetorquerData").onInterface(INTERFACE_NAME).withGetter([this](){ return this->MagnetorquerData(); }).withSetter([this](const sdbus::Struct<int32_t, int32_t>& value){ this->MagnetorquerData(value); });
    }

    ~ADCS_adaptor() = default;

public:
    void emitReactionWheelsCommand(const sdbus::Struct<int32_t>& command)
    {
        object_.emitSignal("ReactionWheelsCommand").onInterface(INTERFACE_NAME).withArguments(command);
    }

    void emitMagnetorquerCommand(const sdbus::Struct<int32_t>& command)
    {
        object_.emitSignal("MagnetorquerCommand").onInterface(INTERFACE_NAME).withArguments(command);
    }

private:
    virtual int32_t CurrentState() = 0;
    virtual void CurrentState(const int32_t& value) = 0;
    virtual sdbus::Struct<sdbus::Struct<double, double, double>, sdbus::Struct<double, double, double>, int32_t> GPS_Data() = 0;
    virtual void GPS_Data(const sdbus::Struct<sdbus::Struct<double, double, double>, sdbus::Struct<double, double, double>, int32_t>& value) = 0;
    virtual sdbus::Struct<double, double, double, int32_t> StarTrackerData() = 0;
    virtual void StarTrackerData(const sdbus::Struct<double, double, double, int32_t>& value) = 0;
    virtual std::vector<sdbus::Struct<int32_t, int32_t>> MagnetometersData() = 0;
    virtual void MagnetometersData(const std::vector<sdbus::Struct<int32_t, int32_t>>& value) = 0;
    virtual std::vector<sdbus::Struct<int32_t, int32_t>> ReactionWheelsData() = 0;
    virtual void ReactionWheelsData(const std::vector<sdbus::Struct<int32_t, int32_t>>& value) = 0;
    virtual sdbus::Struct<int32_t, int32_t> MagnetorquerData() = 0;
    virtual void MagnetorquerData(const sdbus::Struct<int32_t, int32_t>& value) = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
